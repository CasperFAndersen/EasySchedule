//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesktopClient.ScheduleShiftService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScheduleShiftService.IScheduleShiftService")]
    public interface IScheduleShiftService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduleShiftService/SetScheduleShiftForSale", ReplyAction="http://tempuri.org/IScheduleShiftService/SetScheduleShiftForSaleResponse")]
        void SetScheduleShiftForSale(Core.ScheduleShift scheduleShift);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduleShiftService/SetScheduleShiftForSale", ReplyAction="http://tempuri.org/IScheduleShiftService/SetScheduleShiftForSaleResponse")]
        System.Threading.Tasks.Task SetScheduleShiftForSaleAsync(Core.ScheduleShift scheduleShift);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduleShiftService/AcceptAvailableShift", ReplyAction="http://tempuri.org/IScheduleShiftService/AcceptAvailableShiftResponse")]
        void AcceptAvailableShift(Core.ScheduleShift shift, Core.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduleShiftService/AcceptAvailableShift", ReplyAction="http://tempuri.org/IScheduleShiftService/AcceptAvailableShiftResponse")]
        System.Threading.Tasks.Task AcceptAvailableShiftAsync(Core.ScheduleShift shift, Core.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduleShiftService/GetAllAvailableShiftsByDepartmentId", ReplyAction="http://tempuri.org/IScheduleShiftService/GetAllAvailableShiftsByDepartmentIdRespo" +
            "nse")]
        System.Collections.Generic.List<Core.ScheduleShift> GetAllAvailableShiftsByDepartmentId(int departmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduleShiftService/GetAllAvailableShiftsByDepartmentId", ReplyAction="http://tempuri.org/IScheduleShiftService/GetAllAvailableShiftsByDepartmentIdRespo" +
            "nse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Core.ScheduleShift>> GetAllAvailableShiftsByDepartmentIdAsync(int departmentId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScheduleShiftServiceChannel : DesktopClient.ScheduleShiftService.IScheduleShiftService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScheduleShiftServiceClient : System.ServiceModel.ClientBase<DesktopClient.ScheduleShiftService.IScheduleShiftService>, DesktopClient.ScheduleShiftService.IScheduleShiftService {
        
        public ScheduleShiftServiceClient() {
        }
        
        public ScheduleShiftServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScheduleShiftServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScheduleShiftServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScheduleShiftServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetScheduleShiftForSale(Core.ScheduleShift scheduleShift) {
            base.Channel.SetScheduleShiftForSale(scheduleShift);
        }
        
        public System.Threading.Tasks.Task SetScheduleShiftForSaleAsync(Core.ScheduleShift scheduleShift) {
            return base.Channel.SetScheduleShiftForSaleAsync(scheduleShift);
        }
        
        public void AcceptAvailableShift(Core.ScheduleShift shift, Core.Employee employee) {
            base.Channel.AcceptAvailableShift(shift, employee);
        }
        
        public System.Threading.Tasks.Task AcceptAvailableShiftAsync(Core.ScheduleShift shift, Core.Employee employee) {
            return base.Channel.AcceptAvailableShiftAsync(shift, employee);
        }
        
        public System.Collections.Generic.List<Core.ScheduleShift> GetAllAvailableShiftsByDepartmentId(int departmentId) {
            return base.Channel.GetAllAvailableShiftsByDepartmentId(departmentId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Core.ScheduleShift>> GetAllAvailableShiftsByDepartmentIdAsync(int departmentId) {
            return base.Channel.GetAllAvailableShiftsByDepartmentIdAsync(departmentId);
        }
    }
}
