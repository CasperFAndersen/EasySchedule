//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesktopClient.TempShiftService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TempShiftService.ITempShiftService")]
    public interface ITempShiftService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempShiftService/CreateTempShift", ReplyAction="http://tempuri.org/ITempShiftService/CreateTempShiftResponse")]
        Core.TemplateShift CreateTempShift(System.DayOfWeek weekDay, int hours, System.TimeSpan startTime, int templateScheduleID, Core.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempShiftService/CreateTempShift", ReplyAction="http://tempuri.org/ITempShiftService/CreateTempShiftResponse")]
        System.Threading.Tasks.Task<Core.TemplateShift> CreateTempShiftAsync(System.DayOfWeek weekDay, int hours, System.TimeSpan startTime, int templateScheduleID, Core.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempShiftService/FindTempShiftByID", ReplyAction="http://tempuri.org/ITempShiftService/FindTempShiftByIDResponse")]
        Core.TemplateShift FindTempShiftByID(int tempShiftID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempShiftService/FindTempShiftByID", ReplyAction="http://tempuri.org/ITempShiftService/FindTempShiftByIDResponse")]
        System.Threading.Tasks.Task<Core.TemplateShift> FindTempShiftByIDAsync(int tempShiftID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITempShiftServiceChannel : DesktopClient.TempShiftService.ITempShiftService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TempShiftServiceClient : System.ServiceModel.ClientBase<DesktopClient.TempShiftService.ITempShiftService>, DesktopClient.TempShiftService.ITempShiftService {
        
        public TempShiftServiceClient() {
        }
        
        public TempShiftServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TempShiftServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempShiftServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempShiftServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Core.TemplateShift CreateTempShift(System.DayOfWeek weekDay, int hours, System.TimeSpan startTime, int templateScheduleID, Core.Employee employee) {
            return base.Channel.CreateTempShift(weekDay, hours, startTime, templateScheduleID, employee);
        }
        
        public System.Threading.Tasks.Task<Core.TemplateShift> CreateTempShiftAsync(System.DayOfWeek weekDay, int hours, System.TimeSpan startTime, int templateScheduleID, Core.Employee employee) {
            return base.Channel.CreateTempShiftAsync(weekDay, hours, startTime, templateScheduleID, employee);
        }
        
        public Core.TemplateShift FindTempShiftByID(int tempShiftID) {
            return base.Channel.FindTempShiftByID(tempShiftID);
        }
        
        public System.Threading.Tasks.Task<Core.TemplateShift> FindTempShiftByIDAsync(int tempShiftID) {
            return base.Channel.FindTempShiftByIDAsync(tempShiftID);
        }
    }
}
