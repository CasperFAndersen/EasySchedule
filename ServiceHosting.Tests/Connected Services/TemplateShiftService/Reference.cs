//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceHosting.Tests.TemplateShiftService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DayOfWeek", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public enum DayOfWeek : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sunday = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Monday = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tuesday = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wednesday = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Thursday = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Friday = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Saturday = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TemplateShiftService.ITemplateShiftService")]
    public interface ITemplateShiftService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateShiftService/CreateTemplateShift", ReplyAction="http://tempuri.org/ITemplateShiftService/CreateTemplateShiftResponse")]
        Core.TemplateShift CreateTemplateShift(ServiceHosting.Tests.TemplateShiftService.DayOfWeek weekDay, double hours, System.TimeSpan startTime, int templateScheduleId, Core.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateShiftService/CreateTemplateShift", ReplyAction="http://tempuri.org/ITemplateShiftService/CreateTemplateShiftResponse")]
        System.Threading.Tasks.Task<Core.TemplateShift> CreateTemplateShiftAsync(ServiceHosting.Tests.TemplateShiftService.DayOfWeek weekDay, double hours, System.TimeSpan startTime, int templateScheduleId, Core.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateShiftService/FindTemplateShiftById", ReplyAction="http://tempuri.org/ITemplateShiftService/FindTemplateShiftByIdResponse")]
        Core.TemplateShift FindTemplateShiftById(int templateShiftId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateShiftService/FindTemplateShiftById", ReplyAction="http://tempuri.org/ITemplateShiftService/FindTemplateShiftByIdResponse")]
        System.Threading.Tasks.Task<Core.TemplateShift> FindTemplateShiftByIdAsync(int templateShiftId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITemplateShiftServiceChannel : ServiceHosting.Tests.TemplateShiftService.ITemplateShiftService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemplateShiftServiceClient : System.ServiceModel.ClientBase<ServiceHosting.Tests.TemplateShiftService.ITemplateShiftService>, ServiceHosting.Tests.TemplateShiftService.ITemplateShiftService {
        
        public TemplateShiftServiceClient() {
        }
        
        public TemplateShiftServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TemplateShiftServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemplateShiftServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemplateShiftServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Core.TemplateShift CreateTemplateShift(ServiceHosting.Tests.TemplateShiftService.DayOfWeek weekDay, double hours, System.TimeSpan startTime, int templateScheduleId, Core.Employee employee) {
            return base.Channel.CreateTemplateShift(weekDay, hours, startTime, templateScheduleId, employee);
        }
        
        public System.Threading.Tasks.Task<Core.TemplateShift> CreateTemplateShiftAsync(ServiceHosting.Tests.TemplateShiftService.DayOfWeek weekDay, double hours, System.TimeSpan startTime, int templateScheduleId, Core.Employee employee) {
            return base.Channel.CreateTemplateShiftAsync(weekDay, hours, startTime, templateScheduleId, employee);
        }
        
        public Core.TemplateShift FindTemplateShiftById(int templateShiftId) {
            return base.Channel.FindTemplateShiftById(templateShiftId);
        }
        
        public System.Threading.Tasks.Task<Core.TemplateShift> FindTemplateShiftByIdAsync(int templateShiftId) {
            return base.Channel.FindTemplateShiftByIdAsync(templateShiftId);
        }
    }
}
